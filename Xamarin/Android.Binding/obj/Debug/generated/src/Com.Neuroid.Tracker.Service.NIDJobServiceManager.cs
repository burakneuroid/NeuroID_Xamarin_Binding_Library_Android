//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Neuroid.Tracker.Service {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']"
	[global::Android.Runtime.Register ("com/neuroid/tracker/service/NIDJobServiceManager", DoNotGenerateAcw=true)]
	public sealed partial class NIDJobServiceManager : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']/field[@name='INSTANCE']"
		[Register ("INSTANCE")]
		public static global::Com.Neuroid.Tracker.Service.NIDJobServiceManager Instance {
			get {
				const string __id = "INSTANCE.Lcom/neuroid/tracker/service/NIDJobServiceManager;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Com.Neuroid.Tracker.Service.NIDJobServiceManager> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/neuroid/tracker/service/NIDJobServiceManager", typeof (NIDJobServiceManager));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		internal NIDJobServiceManager (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		public unsafe bool IsStopped {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']/method[@name='isStopped' and count(parameter)=0]"
			[Register ("isStopped", "()Z", "")]
			get {
				const string __id = "isStopped.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool SendEventsNowEnabled {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']/method[@name='isSendEventsNowEnabled' and count(parameter)=0]"
			[Register ("isSendEventsNowEnabled", "()Z", "")]
			get {
				const string __id = "isSendEventsNowEnabled.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']/method[@name='setSendEventsNowEnabled' and count(parameter)=1 and parameter[1][@type='boolean']]"
			[Register ("setSendEventsNowEnabled", "(Z)V", "")]
			set {
				const string __id = "setSendEventsNowEnabled.(Z)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
				}
			}
		}

		public unsafe bool UserActive {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']/method[@name='getUserActive' and count(parameter)=0]"
			[Register ("getUserActive", "()Z", "")]
			get {
				const string __id = "getUserActive.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']/method[@name='setUserActive' and count(parameter)=1 and parameter[1][@type='boolean']]"
			[Register ("setUserActive", "(Z)V", "")]
			set {
				const string __id = "setUserActive.(Z)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']/method[@name='restart' and count(parameter)=0]"
		[Register ("restart", "()V", "")]
		public unsafe void Restart ()
		{
			const string __id = "restart.()V";
			try {
				_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']/method[@name='sendEventsNow' and count(parameter)=2 and parameter[1][@type='boolean'] and parameter[2][@type='kotlin.coroutines.Continuation&lt;? super kotlin.Unit&gt;']]"
		[Register ("sendEventsNow", "(ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;", "")]
		public unsafe global::Java.Lang.Object SendEventsNow (bool forceSendEvents, global::Kotlin.Coroutines.IContinuation p1)
		{
			const string __id = "sendEventsNow.(ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (forceSendEvents);
				__args [1] = new JniArgumentValue ((p1 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p1).Handle);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (p1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']/method[@name='startJob' and count(parameter)=3 and parameter[1][@type='android.app.Application'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("startJob", "(Landroid/app/Application;Ljava/lang/String;Ljava/lang/String;)V", "")]
		public unsafe void StartJob (global::Android.App.Application application, string clientKey, string endpoint)
		{
			const string __id = "startJob.(Landroid/app/Application;Ljava/lang/String;Ljava/lang/String;)V";
			IntPtr native_clientKey = JNIEnv.NewString ((string)clientKey);
			IntPtr native_endpoint = JNIEnv.NewString ((string)endpoint);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((application == null) ? IntPtr.Zero : ((global::Java.Lang.Object) application).Handle);
				__args [1] = new JniArgumentValue (native_clientKey);
				__args [2] = new JniArgumentValue (native_endpoint);
				_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_clientKey);
				JNIEnv.DeleteLocalRef (native_endpoint);
				global::System.GC.KeepAlive (application);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDJobServiceManager']/method[@name='stopJob' and count(parameter)=0]"
		[Register ("stopJob", "()V", "")]
		public unsafe void StopJob ()
		{
			const string __id = "stopJob.()V";
			try {
				_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

	}
}

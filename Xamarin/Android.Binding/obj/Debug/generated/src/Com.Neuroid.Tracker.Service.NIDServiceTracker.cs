//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Neuroid.Tracker.Service {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']"
	[global::Android.Runtime.Register ("com/neuroid/tracker/service/NIDServiceTracker", DoNotGenerateAcw=true)]
	public sealed partial class NIDServiceTracker : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/field[@name='INSTANCE']"
		[Register ("INSTANCE")]
		public static global::Com.Neuroid.Tracker.Service.NIDServiceTracker Instance {
			get {
				const string __id = "INSTANCE.Lcom/neuroid/tracker/service/NIDServiceTracker;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Com.Neuroid.Tracker.Service.NIDServiceTracker> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
		}

		// Metadata.xml XPath field reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/field[@name='NID_ERROR_SERVICE']"
		[Register ("NID_ERROR_SERVICE")]
		public const int NidErrorService = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/field[@name='NID_OK_SERVICE']"
		[Register ("NID_OK_SERVICE")]
		public const int NidOkService = (int) 1;

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/neuroid/tracker/service/NIDServiceTracker", typeof (NIDServiceTracker));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		internal NIDServiceTracker (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		public unsafe string Environment {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='getEnvironment' and count(parameter)=0]"
			[Register ("getEnvironment", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getEnvironment.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='setEnvironment' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setEnvironment", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setEnvironment.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		public unsafe string FirstScreenName {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='getFirstScreenName' and count(parameter)=0]"
			[Register ("getFirstScreenName", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getFirstScreenName.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='setFirstScreenName' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setFirstScreenName", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setFirstScreenName.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		public unsafe global::System.Collections.Generic.ICollection<string> RegisteredViews {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='getRegisteredViews' and count(parameter)=0]"
			[Register ("getRegisteredViews", "()Ljava/util/Set;", "")]
			get {
				const string __id = "getRegisteredViews.()Ljava/util/Set;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return global::Android.Runtime.JavaSet<string>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='setRegisteredViews' and count(parameter)=1 and parameter[1][@type='java.util.Set&lt;java.lang.String&gt;']]"
			[Register ("setRegisteredViews", "(Ljava/util/Set;)V", "")]
			set {
				const string __id = "setRegisteredViews.(Ljava/util/Set;)V";
				IntPtr native_value = global::Android.Runtime.JavaSet<string>.ToLocalJniHandle (value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
					global::System.GC.KeepAlive (value);
				}
			}
		}

		public unsafe string RndmId {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='getRndmId' and count(parameter)=0]"
			[Register ("getRndmId", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getRndmId.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='setRndmId' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setRndmId", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setRndmId.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		public unsafe string ScreenActivityName {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='getScreenActivityName' and count(parameter)=0]"
			[Register ("getScreenActivityName", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getScreenActivityName.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='setScreenActivityName' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setScreenActivityName", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setScreenActivityName.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		public unsafe string ScreenFragName {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='getScreenFragName' and count(parameter)=0]"
			[Register ("getScreenFragName", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getScreenFragName.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='setScreenFragName' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setScreenFragName", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setScreenFragName.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		public unsafe string ScreenName {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='getScreenName' and count(parameter)=0]"
			[Register ("getScreenName", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getScreenName.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='setScreenName' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setScreenName", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setScreenName.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		public unsafe string SiteId {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='getSiteId' and count(parameter)=0]"
			[Register ("getSiteId", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getSiteId.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='setSiteId' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setSiteId", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setSiteId.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='getContentJson' and count(parameter)=3 and parameter[1][@type='android.content.Context'] and parameter[2][@type='org.json.JSONArray'] and parameter[3][@type='kotlin.coroutines.Continuation&lt;? super java.lang.String&gt;']]"
		[Register ("getContentJson", "(Landroid/content/Context;Lorg/json/JSONArray;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "")]
		public unsafe global::Java.Lang.Object GetContentJson (global::Android.Content.Context context, global::Org.Json.JSONArray events, global::Kotlin.Coroutines.IContinuation _completion)
		{
			const string __id = "getContentJson.(Landroid/content/Context;Lorg/json/JSONArray;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				__args [1] = new JniArgumentValue ((events == null) ? IntPtr.Zero : ((global::Java.Lang.Object) events).Handle);
				__args [2] = new JniArgumentValue ((_completion == null) ? IntPtr.Zero : ((global::Java.Lang.Object) _completion).Handle);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (context);
				global::System.GC.KeepAlive (events);
				global::System.GC.KeepAlive (_completion);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.neuroid.tracker.service']/class[@name='NIDServiceTracker']/method[@name='sendEventToServer' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='android.app.Application'] and parameter[4][@type='java.util.Set&lt;java.lang.String&gt;'] and parameter[5][@type='kotlin.coroutines.Continuation&lt;? super kotlin.Pair&lt;java.lang.Integer, java.lang.Boolean&gt;&gt;']]"
		[Register ("sendEventToServer", "(Ljava/lang/String;Ljava/lang/String;Landroid/app/Application;Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "")]
		public unsafe global::Java.Lang.Object SendEventToServer (string key, string endpoint, global::Android.App.Application context, global::System.Collections.Generic.ICollection<string> events, global::Kotlin.Coroutines.IContinuation p4)
		{
			const string __id = "sendEventToServer.(Ljava/lang/String;Ljava/lang/String;Landroid/app/Application;Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;";
			IntPtr native_key = JNIEnv.NewString ((string)key);
			IntPtr native_endpoint = JNIEnv.NewString ((string)endpoint);
			IntPtr native_events = global::Android.Runtime.JavaSet<string>.ToLocalJniHandle (events);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_key);
				__args [1] = new JniArgumentValue (native_endpoint);
				__args [2] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				__args [3] = new JniArgumentValue (native_events);
				__args [4] = new JniArgumentValue ((p4 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p4).Handle);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_key);
				JNIEnv.DeleteLocalRef (native_endpoint);
				JNIEnv.DeleteLocalRef (native_events);
				global::System.GC.KeepAlive (context);
				global::System.GC.KeepAlive (events);
				global::System.GC.KeepAlive (p4);
			}
		}

	}
}
